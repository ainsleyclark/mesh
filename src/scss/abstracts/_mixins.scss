// _mixins.scss
//
// Contains all mixins used with mesh
// ==========================================================================

// Create Media Query
// ==========================================================================

/// @author Ainsley Clark
/// @param {Number} $breakpoint - Initial breakpoint
@mixin create-mediaquery($breakpoint) {
	@if ($breakpoint == 0) {
		@content;
	} @else {
		@media (min-width: $breakpoint * 1px) {
			@content;
		}
	}
}

// Create Column Classes
// ==========================================================================

/// @author Ainsley Clark
/// @param {String} $modifier - Class
/// @param {Number} $grid-cols - Amount of columns
/// @param {Number} $breakpoint - Media breakpoint
@mixin create-col-classes($modifier, $grid-cols, $breakpoint) {
	@include create-mediaquery($breakpoint) {
		//Columns
		.col#{$modifier}-auto {
			flex: 0 0 auto;
			width: auto;
			max-width: 100%;
		}
		@for $i from 1 through $grid-columns {
			.col#{$modifier}-#{$i} {
				width: (100 / ($grid-columns / $i)) * 1%;
			}
		}
		.col#{$modifier}-offset-0 {
			margin-left: 0;
		}
		//Offsets
		@for $i from 1 through $grid-columns {
			.offset#{$modifier}-#{$i} {
				margin-left: (100 / ($grid-columns / $i)) * 1%;
			}
		}
	}
}

// Pixel to REM Converter
// ==========================================================================

/// @author Ainsley Clark
/// @param {Number} $pxValue - Pixel amount to convert
/// @param {String} $property [font-size] - Property to convert
/// @param {Number} $standard-size - Initial base rem size
@mixin px-to-rem($pxValue, $property: 'font-size', $standard-size: 16) {
	#{$property}: $pxValue + px;
	#{$property}: $pxValue / $standard-size + rem; // sass-lint:disable-line no-duplicate-properties
}

// Breakpoint Mixins
// ==========================================================================

/// @author Ainsley Clark
/// @return mediaquery based on breakpoint set in _variables.scss
@mixin media-mob {
	@media (min-width: #{$grid-breakpoint-mob}) {
		@content;
	}
}

@mixin media-tab {
	@media (min-width: #{$grid-breakpoint-tab}) {
		@content;
	}
}

@mixin media-desk {
	@media (min-width: #{$grid-breakpoint-desk}) {
		@content;
	}
}

@mixin media-hd {
	@media (min-width: #{$grid-breakpoint-hd}) {
		@content;
	}
}

// Event Wrapper
// ==========================================================================

/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
	@if $self {
		&,
		&:hover,
		&:active,
		&:focus {
			@content;
		}
	} @else {
		&:hover,
		&:active,
		&:focus {
			@content;
		}
	}
}

// Buttons Colored
// ==========================================================================

/// @author Ainsley Clark
/// @param {Color} - Hex
/// @return {Class} - Returns properties for coloured buttons
@mixin buttons-colored($color) {
	color: color-contrast($color);
	background-color: $color;

	//Shadows
	@if $button-enable-shadows {
		box-shadow: 0 2px 2px 0 rgba($color, 0.14), 0 3px 1px -2px rgba($color, 0.2), 0 1px 5px 0 rgba($color, 0.12);

		&:hover {
			box-shadow: 0 14px 26px -12px rgba($color, 0.42), 0 4px 23px 0 rgba(0, 0, 0, 0.12), 0 8px 10px -5px rgba($color, 0.2);
		}

		&:active {
			background-color: darken($color, 10%);
		}
	}
}

// Buttons Outline
// ==========================================================================

/// @author Ainsley Clark
/// @param {Color} - Hex
/// @return {Class} - Returns properties for outlined buttons
@mixin buttons-outline($color) {
	color: $color;
	border: 1px solid $color;

	&:active,
	&:after {
		border-color: $color;
	}

	&:active {
		background-color: darken($color, 10%) !important;
	}

	&:hover {
		background-color: $color;
		color: color-contrast($color) !important;
	}
}

// Badges Colored
// ==========================================================================

@mixin badge-colored($color) {
	color: color-contrast($color);
	background-color: $color;
}

// Tags Colored
// ===========================================================================

@mixin tag-colored($color) {
	color: color-contrast($color);
	background-color: $color;
}